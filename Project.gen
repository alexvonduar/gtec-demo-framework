<?xml version="1.0" encoding="UTF-8"?>
<FslBuildGenProjectRoot Version="1">
  <Project Name="DemoFramework" ShortName="DF" Version="5.7.0" DefaultTemplate="DF" DefaultPackageLanguage="C++" DefaultCompany="NXP" RequirePackageCreationYear="true" ToolConfigFile=".Config/FslBuildGen.xml">
    <!-- Add a base package that all other packages dependent on -->
    <AddBasePackage Name="Platform"/>
    <AddRootDirectory Name="$(FSL_GRAPHICS_SDK)"/>
    <AddRootDirectory Name="$(FSL_GRAPHICS_SDK_THIRD_PARTY_LIBS_DIR)" Create="true"/>
    <PackageConfiguration Name="default">
      <!-- ThirdParty -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/ThirdParty"/>
      <!-- Framework packages -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/DemoFramework"/>
      <!-- App packages -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/DemoApps"/>
    </PackageConfiguration>
    <PackageConfiguration Name="sdk" Preload="true">
      <!-- ThirdParty -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/ThirdParty"/>
      <!-- Framework packages -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/DemoFramework" ScanMethod="AllSubDirectories"/>
      <!-- App packages -->
      <PackageLocation Name="$(FSL_GRAPHICS_SDK)/DemoApps" ScanMethod="AllSubDirectories"/>
    </PackageConfiguration>
    <BuildDocConfiguration>
      <Requirement Name="GoogleUnitTest" Skip="true"/>
    </BuildDocConfiguration>
    <CMakeConfiguration DefaultBuildDir="${TopProjectRoot}/build" MinVersion="3.10.2" NinjaRecipe="Recipe.BuildTool.ninja">
      <Platform Name="QNX" DefaultGeneratorName="Ninja"/>
      <Platform Name="Ubuntu" DefaultGeneratorName="Ninja"/>
      <!-- For now we rely on FslBuild to select the default generator based on CompilerConfiguration from this file, as that was the old way to do it instead of using 
           DefaultGeneratorName="Visual Studio 16 2019 Win64"-->
      <Platform Name="Windows"/>
      <!-- 
      The current Yocto SDKs do not contain the required cmake files needed by find_package, so we force disable it for now.
      This can be overriden via the command line.
      -->
      <Platform Name="Yocto" DefaultGeneratorName="Ninja" AllowFindPackage="false"/>
    </CMakeConfiguration>
    <ClangFormatConfiguration FileExtensions=".cpp;.hpp;.frag;.geom;.tesc;.tese;.vert" Recipe="Recipe.BuildTool.clang_format"/>
    <ClangTidyConfiguration FileExtensions=".cpp;.hpp" ClangRecipe="Recipe.BuildTool.clang" ClangTidyRecipe="Recipe.BuildTool.clang_tidy">
      <Platform Name="All">
        <Compiler Flags="-Wall;-Wno-invalid-token-paste;-Wno-unknown-pragmas;-Wno-unused-variable;-Wno-unused-value"/>
        <StrictChecks>
          clang-analyzer-core.*
          clang-analyzer-cplusplus.*
          bugprone-assert-side-effect
          bugprone-dangling-handle
          bugprone-dynamic-static-initializers
          bugprone-exception-escape
          bugprone-forward-declaration-namespace
          bugprone-infinite-loop
          bugprone-misplaced-widening-cast
          bugprone-multiple-statement-macro
          bugprone-not-null-terminated-result
          bugprone-posix-return
          bugprone-signed-char-misuse
          bugprone-sizeof-expression
          bugprone-suspicious-semicolon
          bugprone-suspicious-string-compare
          bugprone-throw-keyword-missing
          bugprone-undelegated-constructor
          bugprone-unhandled-self-assignment
          bugprone-unused-return-value
          bugprone-use-after-move
          cert-dcl21-cpp
          cppcoreguidelines-c-copy-assignment-signature
          cppcoreguidelines-init-variables
          cppcoreguidelines-interfaces-global-init
          cppcoreguidelines-macro-usage
          cppcoreguidelines-narrowing-conversions
          cppcoreguidelines-pro-type-member-init
          cppcoreguidelines-pro-type-vararg
          cppcoreguidelines-slicing
          google-build-explicit-make-pair
          google-build-namespaces
          google-global-names-in-headers
          hicpp-no-assembler
          misc-definitions-in-headers
          misc-non-copyable-objects
          misc-redundant-expression
          misc-unused-using-decls
          modernize-avoid-c-arrays
          modernize-deprecated-ios-base-aliases
          modernize-redundant-void-arg
          modernize-replace-auto-ptr
          modernize-return-braced-init-list
          modernize-use-bool-literals
          modernize-use-noexcept
          modernize-use-nullptr
          modernize-use-transparent-functors
          modernize-use-uncaught-exceptions
          modernize-use-using
          performance-no-automatic-move
          performance-trivially-destructible
          performance-type-promotion-in-math-fn
          performance-unnecessary-copy-initialization
          performance-unnecessary-value-param
          readability-const-return-type
          readability-implicit-bool-conversion
          readability-named-parameter
          readability-non-const-parameter
          readability-qualified-auto
          readability-redundant-access-specifiers
          readability-redundant-control-flow
          readability-redundant-declaration
          readability-redundant-preprocessor
          readability-redundant-string-init
          readability-static-definition-in-anonymous-namespace
          readability-string-compare
        </StrictChecks>
      </Platform>
      <Platform Name="Android">
        <Compiler Flags="-std=c++14"/>
      </Platform>
      <Platform Name="Ubuntu">
        <Compiler Flags="-std=c++14"/>
        <Defines All="FSL_PLATFORM_UBUNTU;PIC" Debug="DEBUG" Release="NDEBUG"/>
      </Platform>
      <Platform Name="Windows">
        <Compiler Flags="-std=c++14;-Wmicrosoft;-fms-compatibility"/>
        <Defines All="_UNICODE;UNICODE;NOMINMAX;VC_EXTRALEAN;WIN32_LEAN_AND_MEAN;WIN32;_CONSOLE" Debug="_DEBUG" Release="NDEBUG"/>
      </Platform>
      <Platform Name="Yocto">
        <Compiler Flags="-std=c++14;-I$(ROOTFS)/usr/include"/>
        <Defines All="FSL_PLATFORM_YOCTO;PIC;LINUX" Debug="DEBUG;_DEBUG" Release="NDEBUG"/>
      </Platform>
    </ClangTidyConfiguration>
    <CompilerConfiguration Name="VisualStudio" Platform="Windows" DefaultVersion="2019"/>
    <Experimental AllowDownloads="true" DisableDownloadEnv="FSL_GRAPHICS_SDK_THIRD_PARTY_LIBS_DISABLE_DOWNLOAD">
      <!-- Define the name of the default third party installation directory. -->
      <!-- This will be the directory where we install/build any thirdparty source that is needed -->
      <DefaultThirdPartyInstallDirectory Name="$(FSL_GRAPHICS_SDK_THIRD_PARTY_LIBS_DIR)"/>
      <DefaultThirdPartyInstallReadonlyCacheDirectory Name="$(FSL_GRAPHICS_SDK_THIRD_PARTY_LIBS_READONLY_CACHE_DIR)"/>
      <!--Android NDKToolchain="clang" StlType="c++_shared"/-->
      <Platform Name="Yocto">
        <Recipes.DefaultValue Value=""/>
      </Platform>
    </Experimental>
  </Project>
</FslBuildGenProjectRoot>
