# AUTOGENERATED by FslBuildGen 
# Any manual changes to it will be lost if its regenerated.
#
# Please modify the 'Fsl.gen' file instead
#
# You may define standard make variables such as CFLAGS or
# CXXFLAGS to affect the build. For example, you could use:
#
#      make CXXFLAGS=-g
#
# to build with debug information. The full list of variables
# that can be used by this makefile is:
# AR, CC, CFLAGS, CPPFLAGS, CXX, CXXFLAGS, LD, LDFLAGS, MAKE, RANLIB.

# You may also specify config=Debug|Release
# or their corresponding lower case variants on make command line to select
# the corresponding default flags values.

TARGET_NAME=##PACKAGE_TARGET_NAME##
TARGET_INSTALL_PATH=##PACKAGE_TARGET_INSTALL_PATH##

SOURCES=##PACKAGE_SOURCE_FILES## 

INCLUDE_DIRS=##PACKAGE_INCLUDE_DIRS##

CPP_DEFINE_FLAG_NAMES=##PACKAGE_DEFINES##

USER_LIB_DEPS=##PACKAGE_LIBRARY_DEPENDENCIES##

USER_EXTLIB_DEPS=##PACKAGE_EXTERNAL_LIBRARY_DEPENDENCIES##

USER_EXTLIB_PATHS=##PACKAGE_EXTERNAL_LIBRARY_PATHS##

USER_EXTDLL_PATHS=##PACKAGE_EXTERNAL_DLL_PATHS##

# Stuff below is basically the same for all builds

SHELL = /bin/sh

CC ?= cc
CXX ?= c++  

# Default to a release build
config ?= Release
# Default to coverage disabled
coverage ?= Off
 
ifeq ($(config),debug)
override config := Debug
else ifeq ($(config),release)
override config := Release
else ifeq ($(config),coverage)
override config := Coverage
endif
ifeq ($(config),Debug)
TARGET_POSTFIX=_d
CPPFLAGS += -DDEBUG
CFLAGS += -g -O0
CXXFLAGS += -g -O0
LDFLAGS += -g
else ifeq ($(config),Release)
TARGET_POSTFIX=
CPPFLAGS += -DNDEBUG
CFLAGS += -O3
CXXFLAGS += -O3
LDFLAGS += -s
else ifeq ($(config),Coverage)
TARGET_POSTFIX=_c
CPPFLAGS += -DNDEBUG
CFLAGS += -fprofile-arcs -ftest-coverage -g -O0
CXXFLAGS += -fprofile-arcs -ftest-coverage -g -O0
LDFLAGS += -g -fprofile-arcs
else ifneq (,$(config))
$(warning Unknown configuration "$(config)")
endif

##PACKAGE_VARIANT_SECTION##


OBJ_PATH=##PACKAGE_OBJECT_PATH##
VARIANT_NAME=##PACKAGE_VARIANT_NAME##

TARGET=$(TARGET_NAME)$(VARIANT_NAME)$(TARGET_POSTFIX)
OBJECTS = $(patsubst %.cpp,$(OBJ_PATH)/%.o,$(SOURCES)) 
OBJECTS_COV1 = $(OBJECTS:.o=.gcno)
OBJECTS_COV2 = $(OBJECTS:.o=.gcda)
OBJECTS_DEPS = $(OBJECTS:.o=.d)
INCLUDE_DIR_PARAMS=$(foreach d,$(INCLUDE_DIRS),-I$d)
CPP_DEFINE_FLAG_PARAMS=$(foreach d,$(CPP_DEFINE_FLAG_NAMES),-D$d)
USER_EXTLIB_DEPS_PARAMS=$(foreach d,$(USER_EXTLIB_DEPS),-l$d)
USER_EXTLIB_PATHS_PARAMS=$(foreach d,$(USER_EXTLIB_PATHS),-Wl,--library-path=$d)
USER_EXTDLL_PATHS_PARAMS=$(foreach d,$(USER_EXTDLL_PATHS),-Wl,-rpath=$d)

# -Wextra -Wpedantic
# -Wcast-function-type -Wredundant-move
REQUIRED_CXX_FLAGS = -Wall -Wempty-body -Wmissing-field-initializers -Wtype-limits -Wuninitialized -fPIC -DPIC -std=c++14 -g $(CPP_DEFINE_FLAG_PARAMS) -pthread

DESTDIR ?= $(FSL_GRAPHICS_SDK)/bin/$(TARGET_INSTALL_PATH)/$(TARGET_NAME)
INSTALL_TARGET = $(DESTDIR)/$(TARGET)

all: $(TARGET)

# $@ for the pattern-matched target
$(TARGET): $(OBJECTS) $(USER_LIB_DEPS)
	$(CXX) -o $@ $(LDFLAGS) -pthread $(OBJECTS) $(USER_LIB_DEPS) $(USER_EXTLIB_DEPS_PARAMS) $(USER_EXTLIB_PATHS_PARAMS) $(USER_EXTDLL_PATHS_PARAMS)

  
# Simple rule used for "cleaning" the build environment.
clean:
	@-rm -f $(OBJECTS)
	@-rm -f $(OBJECTS_COV1)
	@-rm -f $(OBJECTS_COV2)
	@-rm -f $(OBJECTS_DEPS)
	@-rm -f $(TARGET)
	@-rm -f $(INSTALL_TARGET)
	@-rm -f gmon.out
	@echo Cleaned

clean-coverage:
	@-rm -f $(OBJECTS_COV2)
	@echo Cleaned coverage

install: all
	@mkdir -p $(DESTDIR)
	@cp $(TARGET) $(INSTALL_TARGET)
	@$(FSL_GRAPHICS_SDK)/.Config/FslContentSync.py Content $(DESTDIR)/Content --create --cache --ifExist
	@$(FSL_GRAPHICS_SDK)/.Config/FslBuildInfo.py --SaveJson $(DESTDIR)/.AppInfo.json --IncludeGeneratorReport --PackageType [Executable]
	@echo Installed to: $(DESTDIR)

# Pattern Rule
# $@ for the pattern-matched target
# $< for the pattern-matched dependency
$(OBJ_PATH)/%.o : %.cpp
	@mkdir -p $(@D)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(REQUIRED_CXX_FLAGS) $(INCLUDE_DIR_PARAMS) -o $@ -c $<

# All this is apparently needed for proper Autodependencies with GNU make
$(OBJ_PATH)/%.d: %.cpp
	@mkdir -p $(@D)
	@rm -f $@;
	@$(CXX) -M $(CPPFLAGS) $(CXXFLAGS) $(REQUIRED_CXX_FLAGS) $(INCLUDE_DIR_PARAMS) $< > $@
	@mv -f $@ $@.tmp
	@sed -e 's|.*:|$(@D)/$(*F).o:|' < $@.tmp > $@
	@sed -e 's/.*://' -e 's/\\$$//' < $@.tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $@
	@rm -f $@.tmp
	
# pull in dependency info for *existing* .o files
-include $(OBJECTS_DEPS)
	
.PHONY : all clean