import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    ndkVersion "##FSL_NDK_VERSION##"
    compileSdkVersion ##FSL_PACKAGE_TARGET_ANDROID_SDK_VERSION##
    defaultConfig {
        applicationId "com.freescale.##PREFIXED_PROJECT_NAME_L##.##PACKAGE_TARGET_NAME##"
        minSdkVersion ##FSL_PACKAGE_MIN_ANDROID_SDK_VERSION##
        targetSdkVersion ##FSL_PACKAGE_TARGET_ANDROID_SDK_VERSION##
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++14 -frtti -fexceptions"
                version "3.10.2"
            }
        }
        
        ndk {
          abiFilters ##PACKAGE_VARIANT_ANDROID_ABIS##
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Use relinker as recommended by the android documentation at
    // https://developer.android.com/ndk/guides/cpp-support.html#c_runtime_libraries
    // https://github.com/KeepSafe/ReLinker
    implementation 'com.getkeepsafe.relinker:relinker:1.3.1'
}

task buildContentFiles(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'python', "${System.env.FSL_GRAPHICS_SDK}/.Config/FslBuildContent.py", '-p', 'android', '--input', '##PACKAGE_PATH##'
    } else {
        commandLine "${System.env.FSL_GRAPHICS_SDK}/.Config/FslBuildContent.py", '-p', 'android', '--input', '##PACKAGE_PATH##'
    }
}

task syncContentFiles(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'python', "${System.env.FSL_GRAPHICS_SDK}/.Config/FslContentSync.py", '##PACKAGE_CONTENT_PATH##', '##PACKAGE_ANDROID_PROJECT_PATH##/app/src/main/assets/fsl-content', '-i', '--create', '--ifExist'
    } else {
        commandLine "${System.env.FSL_GRAPHICS_SDK}/.Config/FslContentSync.py", '##PACKAGE_CONTENT_PATH##', '##PACKAGE_ANDROID_PROJECT_PATH##/app/src/main/assets/fsl-content', '-i', '--create', '--ifExist'
    }
}

syncContentFiles.dependsOn(buildContentFiles)
preBuild.dependsOn(syncContentFiles)
